# -*- coding: utf-8 -*-
"""BiblioSoftware - ita

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AilxwKAcvOVLGlDCpyTlLFFgIcF1ifxp
"""

import csv
import os

FILE_CSV = "biblioteca.csv"

# Dizionario globale della biblioteca
# chiave = titolo (minuscolo normalizzato), valore = numero di copie disponibili
biblioteca = {}

# ------------------- PERSISTENZA -------------------

def carica_biblioteca_da_csv(percorso=FILE_CSV):
    """Carica lo stato della biblioteca da un file CSV con colonne: titolo,copie"""
    global biblioteca
    biblioteca = {}
    if not os.path.exists(percorso):
        return
    try:
        with open(percorso, newline="", encoding="utf-8") as f:
            lettore = csv.reader(f)
            for riga in lettore:
                if not riga:
                    continue
                titolo = riga[0].strip().lower()
                try:
                    copie = int(riga[1])
                except (IndexError, ValueError):
                    copie = 0
                biblioteca[titolo] = copie
    except Exception as e:
        print(f"‚ö†Ô∏è  Attenzione: impossibile caricare la biblioteca da '{percorso}': {e}")

def salva_biblioteca_su_csv(percorso=FILE_CSV):
    """Salva lo stato della biblioteca su file CSV."""
    try:
        with open(percorso, "w", newline="", encoding="utf-8") as f:
            scrittore = csv.writer(f)
            for titolo, copie in biblioteca.items():
                scrittore.writerow([titolo, copie])
    except Exception as e:
        print(f"‚ùå Errore: impossibile salvare la biblioteca su '{percorso}': {e}")

# ------------------- FUNZIONI DI SUPPORTO -------------------

def normalizza_titolo(titolo: str) -> str:
    """Restituisce il titolo in formato normalizzato (minuscolo, senza spazi)."""
    return titolo.strip().lower()

def mostra_titolo(titolo_normalizzato: str) -> str:
    """Restituisce il titolo formattato per la visualizzazione (minuscolo)."""
    return titolo_normalizzato  # gi√† in minuscolo per uniformit√†

def leggi_intero_positivo(messaggio: str) -> int:
    """Chiede all'utente un numero intero positivo."""
    while True:
        s = input(messaggio).strip()
        try:
            n = int(s)
            if n <= 0:
                print("Inserisci un numero intero positivo maggiore di 0.")
                continue
            return n
        except ValueError:
            print("Valore non valido. Inserisci un numero intero.")

# ------------------- OPERAZIONI SULLA BIBLIOTECA -------------------

def aggiungi_libro(titolo: str, copie: int):
    """Aggiunge copie di un libro (solo quantit√† positive)."""
    if copie <= 0:
        print("Errore: il numero di copie deve essere positivo.")
        return

    chiave = normalizza_titolo(titolo)
    precedente = biblioteca.get(chiave, 0)
    biblioteca[chiave] = precedente + copie
    print(f"Aggiunte {copie} copie di '{mostra_titolo(chiave)}'. Totale: {biblioteca[chiave]}")
    salva_biblioteca_su_csv()

def rimuovi_libro(titolo: str):
    """Rimuove completamente un libro dalla biblioteca."""
    chiave = normalizza_titolo(titolo)
    if chiave in biblioteca:
        del biblioteca[chiave]
        print(f"Il libro '{mostra_titolo(chiave)}' √® stato rimosso.")
        salva_biblioteca_su_csv()
    else:
        print(f"Errore: il libro '{titolo}' non √® presente in biblioteca.")

def libro_disponibile(titolo: str) -> bool:
    """Verifica se il libro √® disponibile (almeno una copia)."""
    chiave = normalizza_titolo(titolo)
    return chiave in biblioteca and biblioteca[chiave] > 0

def prendi_in_prestito(titolo: str):
    """Prende in prestito una copia, se disponibile."""
    chiave = normalizza_titolo(titolo)
    if libro_disponibile(chiave):
        biblioteca[chiave] -= 1
        print(f"Hai preso in prestito '{mostra_titolo(chiave)}'. Copie rimanenti: {biblioteca[chiave]}")
        salva_biblioteca_su_csv()
    else:
        print(f"Errore: '{titolo}' non √® disponibile per il prestito.")

def restituisci_libro(titolo: str, copie: int):
    """
    Restituisce copie di un libro.
    Non √® possibile restituire pi√π copie di quante ne siano state prese in prestito,
    cio√® non si pu√≤ superare il numero iniziale di copie.
    """
    if copie <= 0:
        print("Errore: il numero di copie da restituire deve essere positivo.")
        return

    chiave = normalizza_titolo(titolo)
    if chiave not in biblioteca:
        print(f"Errore: il libro '{titolo}' non esiste in biblioteca.")
        return

    # Verifica che non si superi il numero massimo di copie iniziali
    copie_attuali = biblioteca[chiave]
    # Se non ci sono copie prese in prestito, non serve restituire
    if copie_attuali >= 0:
        print(f"Nessuna copia di '{titolo}' risulta presa in prestito.")
        return

    # Se il numero da restituire √® maggiore delle copie mancanti, errore
    if copie > abs(copie_attuali):
        print(f"Errore: stai cercando di restituire pi√π copie di quante ne siano state prese.")
        return

    biblioteca[chiave] += copie
    print(f"Hai restituito {copie} copie di '{mostra_titolo(chiave)}'. Copie disponibili: {biblioteca[chiave]}")
    salva_biblioteca_su_csv()

def statistiche_biblioteca():
    """Restituisce statistiche sulla biblioteca."""
    totale_libri = len(biblioteca)
    copie_totali = sum(biblioteca.values())
    media_copie = copie_totali / totale_libri if totale_libri > 0 else 0
    return {
        "totale_libri": totale_libri,
        "copie_totali": copie_totali,
        "media_copie": media_copie
    }

def visualizza_libri():
    """Mostra tutti i libri e le copie disponibili."""
    if not biblioteca:
        print("La biblioteca √® vuota.")
        return
    print("\nüìö Libri in biblioteca:")
    for titolo, copie in sorted(biblioteca.items()):
        print(f"- {mostra_titolo(titolo)}: {copie} copie")

# ------------------- CICLO PRINCIPALE -------------------

def main():
    carica_biblioteca_da_csv()
    print("=== BiblioSoftware: Gestione Biblioteca ===")

    while True:
        print("\nScegli un'operazione:")
        print("1. Aggiungi libro")
        print("2. Rimuovi libro")
        print("3. Verifica disponibilit√†")
        print("4. Prendi in prestito")
        print("5. Restituisci libro")
        print("6. Statistiche biblioteca")
        print("7. Visualizza tutti i libri")
        print("esci - per terminar